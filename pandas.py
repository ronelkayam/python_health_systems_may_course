"""

Python הפכה בשנים האחרונות לשפה הפופולארית ביותר לניתוח נתונים בזכות מספר אלמנטים:
הגמישות והקלילות שהשפה מאפשרת למשתמש. לדוגמא המרת טיפוסי נתונים והגדרה פשוטה של פונקציות.
עקומת למידה מהירה. Python קלילה ללימוד גם עבור אלו שאין להם ניסיון בתכנות או שפות אחרות.
לרוב, עבור ניתוח נתונים בסיסי לא נדרש ידע מתקדם בשפה או בהנדסת תוכנה (למשל OOP).
מספר ספריות חזקות במיוחד המנגישות לנו אובייקטים ופונקציות שימושיות לניתוח נתונים.

Pandas היא ספריית Python המספקת יכולות רב עוצמה של מניפולציה וניתוח נתונים.
 הוא בנוי על גבי ספריית
 NumPy ונועד לעבוד עם נתונים במגוון פורמטים, כולל CSV, Excel, מסדי נתונים של SQL ועוד.
 אי אפשר לדבר וללמוד את Pandas מבלי להזכיר את Numpy ואת MatplotLib.
מדובר בשתי ספריות נהדרות אשר Pandas עושה שימוש באובייקטים שלהן באופן דיפולטי.


Numpy – היא ספרייה לעיבוד מידע מתמטי. באמצעותה נבצע פעולות חשבוניות בסיסיות ומורכבות על גביי הנתונים.
בנוסף Numpy מממשת עבורנו אוביקטים שימושים לרבות Numpy.Array אשר משמש כמערך פשוט בדומה למערכים הרגילים של השפה וכן
 ndarray וmatrix המאפשרים להכיל מידע רב-מימדי ולבצע עליהם פעולות מתמטיות.
Pandas משתמש בNumpy על מנת לבצע חישובים ולהחזיק מידע. 
בהמשך נראה כמה קל להפוך np.array לpandas DataFrame או Series. 

Matplotlib – ספריית ויזואליזציה פופולארית. מאפשרת ליצור גרפים של נתונים במספר קטן של שורות קוד.
Pandas עושה שימוש בספרייה באמצעות פקודת plot. בהמשך נראה כיצד לייצר ויזואליזציה של נתונים ישר מתוך pandas.
למשל ליצור נתונים בתור גרפים

"""

import pandas as pd

# Series - מערך דו מימדי של נתונים
#
# d = ['I', 'Love', 'Python', '3']
# mySeries = pd.Series(data=d)
#
# print(mySeries)

# Series יכולה להיות עמודה או שורה בתוך טבלה ובעולם של Pandas כחלק מDataFrame:

"""
DataFrame
 הוא ייצוג של טבלה דו-מימדית המכילה עמודות ושורות בדומה לטבלאות שאנו מכירים ב-SQL: 
"""

d = {'col1': ['I', 'Love', 'Python', '3']
    , 'col2': ['Pandas', 'is', 'the', 'best']
    , 'col3': [11, 25, 36, 98]}

df = pd.DataFrame(data=d)
print(df)

"""
Data Frame
 הוא אובייקט גמיש ביותר אשר יכול לקבל כקלט: רשימות, מילונים, מערכים ואף קבצים כמו CSV וJSON.
בנוסף, עלינו להגדיר שמות לעמודות.
 במקרה זה שמות העמודות נגזרות מתוך הkeys של המילון, וה-values הם הרשומות.

כפי שהוזכר קודם, כל DataFrame בנוי מעמודות המכילות את שם העמודה ואת ערכיה,
 ובPandas היא מוגדרת כאובייקט Series.
 כלומר ניתן להפוך מספר Series לDataFrame וכמובן להתייחס לעמודה אחת כ-Series.
"""

"""
לפעמים נרצה לבחור עמודה ספציפית מתוך DF
כמו למשל בSQL
select col1,col2
From table
"""

print(df[['col1','col3']])


# אני יכול גם לבחור רק עמודה ולעטוף אותה עם סוגרים מרובעים בלבד ][ ואז אני אקבל משתנה מסוג Series

print(df['col1'])
print(type(df['col1']))

# אם נעבוד עם 2 סוגריים נקבל Data frame של עמודה אחת

print(df[['col1']])
print(type(df[['col1']]))


"""
אלמנטים מרכזיים ב-Data frame

index – באופן דיפולטיבי האינדקס מוגדר לפי כמות הרשמות (אשר מתחיל לספור מאפס). 
ניתן להגדיר את אחת העמודות כאינדקס באמצעות המתודה:()set_index
 ולאפס אותו באמצעות ()reset_index
 """
print(df)
print("***********************")
# ישים את האינדקס ראשון
print(df.set_index('col2'))
print("*************************")
# מאפס אינדקס מסויים - אפשר לראות שהאינדקס הדיפולטיבי מקבל מספור
print(df.reset_index())
print(df)


"""
 Axis  –
  בדומה לשפת SQL שבה ישנן פעולות אותן נבצע על טבלה באופן אופקי כמו JOIN ואנכי כמו UNION, גם על DataFrame
   נרצה לבצע שלל פעולות כגון חיבורים, חיתוכים, הפעלת פונקציות ועוד.
לשם כך יש להגדיר על פעולות שכאלה את ציר העבודה:

  axis=0 (שהוא הציר הדיפולטיבי) עבור פעולות אופקיות  (בדומה לJOIN)

  axis=1 עבור פעולות אנכיות (בדומה לUNION)

בPandas ישנן מספר מתודות לחיבור בין טבלאות עליהן : Join, Merge, Concat 

לדוגמא: נוכל לחבר שני DataFrames לאורכם ולרוחבם
"""
#
# d1 = {'col1': ['I', 'Love', 'Python', '3']
#     , 'col2': ['Pandas', 'is', 'the', 'best']
#     , 'col3': [11, 25, 36, 98]}
#
# d2 = {'col1': [1, 2, 3, 4]
#     , 'col2': ['a', 'b', 'c', 'd']}
#
# df1 = pd.DataFrame(d1)
# df2 = pd.DataFrame(d2)
#
# print(pd.concat([df1,df2],axis=0))

# print(pd.concat([df1,df2],axis=1))

# פונקציה נוספות


# print(f"info of dateframe:\n{df1.info()}")
# df1['col4'] = df1['col1']+" "+df1['col2']
# print(f"after concat:\n{df1}")
# ls = [34, 22, 67, 4]
# df1['col5'] = ls
# print(df1)
# df.drop('col5',axis = 1)


"""
תרגילים ועוד פונקציות
https://yashardata.co.il/exercises-to-python-data-analysis-and-pandas-library/
"""
